apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: redis
  labels:
    app: redis
spec:
  ports:
  - port: 6377
    name: peer
  - port: 16377
    name: cluster
  # *.redis.default.svc.cluster.local
  clusterIP: None
  selector:
    app: redis
---
apiVersion: v1
data:
  cluster.conf: |
    port 6377
    appendonly yes
    # cluster or alone
    cluster-enabled yes
    cluster-config-file /var/lib/redis/nodes.conf
    cluster-node-timeout 5000
    dir /var/lib/redis
kind: ConfigMap
metadata:
  name: redis-conf
  labels:
    app: redis
  namespace: default
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  selector:
    matchLabels:
      app: redis
  replicas: 3
#  replicas: 6
  template:
    metadata:
      labels:
        app: redis
        role: node
    spec:
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - labelSelector:
#                matchExpressions:
#                  - key: "app"
#                    operator: In
#                    values:
#                    - redis
#              topologyKey: "kubernetes.io/hostname"
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      # Unable to save in background (redis-server)
      # see https://stackoverflow.com/questions/42502636/unable-to-save-in-background-redis-server
      initContainers:
      - image: harbor.qyvideo.net/k8s/alpine:3.6
        command: ["echo", "1", ">", "/proc/sys/vm/overcommit_memory"]
        name: redis-init
        securityContext:
          privileged: true
      containers:
        - name: redis
          image: harbor.qyvideo.net/k8s/redis:0.1
          imagePullPolicy: Always
          command:
            - bash
            - "-c"
            - |
              redis-server /etc/redis/cluster.conf --protected-mode no
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          resources:
            requests:
              cpu: "100m"
              memory: "2Gi"
            limits:
              cpu: "2000m"
              memory: "40Gi"
          ports:
            - name: redis
              containerPort: 6377
              protocol: "TCP"
            - name: cluster
              containerPort: 16377
              protocol: "TCP"
          volumeMounts:
            - name: "conf"
              mountPath: "/etc/redis"
            - name: "data"
              mountPath: "/var/lib/redis"
        # 集群模式解注释此处：
        - name: "cluster-meet"
          image: harbor.qyvideo.net/k8s/redis:0.1
          imagePullPolicy: Always
          command:
          - bash
          - "-c"
          - |
            set -e
            nslookup redis | awk '/^Address: / { print $2 }' | /usr/local/bin/cluster-meet.sh
            # Don't crash loop
            sleep infinity
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NODE
            value: "3"
          - name: PORT
            value: "6377"
          - name: REPLICA
            value: "0"
      volumes:
        - name: "conf"
          configMap:
            name: "redis-conf"
            items:
              - key: "cluster.conf"
                path: "cluster.conf"
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteMany
      storageClassName: redis-storage
      resources:
        requests:
          storage: 100Gi